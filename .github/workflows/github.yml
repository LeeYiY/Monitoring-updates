name: 下载并通过SCP上传文件

on:
  schedule:
    - cron: '0 2 * * *'  # 每天凌晨2点运行
  workflow_dispatch:  # 允许手动触发

jobs:
  file-transfer:
    runs-on: ubuntu-latest
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 准备工作目录
        run: |
          mkdir -p ./Releases
          mkdir -p ./pending_uploads
          # 创建状态文件记录上传情况
          touch ./upload_status.log
          tree

      - name: 恢复缓存（包括未上传成功的文件）
        uses: actions/cache@v3
        with:
          path: |
            ./Releases
            ./pending_uploads
            ./upload_status.log
          key: ${{ runner.os }}-scp-cache-${{ github.run_id }}
          restore-keys: |
            ${{ runner.os }}-scp-cache-

      - name: 安装Python依赖
        run: |
          python -m pip install --upgrade pip
          pip install requests pyyaml

      - name: 执行github.py脚本
        run: |
          echo "开始执行github.py脚本..."
          python model/github.py
          echo "脚本执行完成，检查Releases目录内容:"
          ls -l ./Releases
          

      - name: 配置SSH客户端
        run: |
          # 创建SSH配置目录
          mkdir -p ~/.ssh
          # 禁用严格主机密钥检查
          echo "StrictHostKeyChecking no" >> ~/.ssh/config
          # 设置权限
          chmod 700 ~/.ssh
          chmod 600 ~/.ssh/config

      - name: 上传文件到远程服务器
        env:
          REMOTE_HOST: ${{ secrets.SSH_HOST }}
          REMOTE_USER: root
          REMOTE_PORT: 10022
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          REMOTE_PATH: /root/zfile/data/000-自动更新
        run: |
          # 写入私钥
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          
           # 处理Releases目录下的文件
          if [ -d "./Releases" ]; then
            echo "=== 开始处理Releases目录下的文件 ==="
            find ./Releases -type f | while read file; do
              filename=$(basename "$file")
              relative_path=$(dirname "$file" | sed 's|^./Releases/||')
              remote_path="$REMOTE_BASE_PATH/$relative_path"
              
              echo "准备上传: $filename (来自: $relative_path)"
              
              # 在远程服务器创建目录
              ssh -p $REMOTE_PORT "$REMOTE_USER@$REMOTE_HOST" "mkdir -p \"$remote_path\""
              
              # 使用SCP上传文件
              scp -P $REMOTE_PORT "$file" "$REMOTE_USER@$REMOTE_HOST:$remote_path/"
              
              if [ $? -eq 0 ]; then
                echo "$(date): 成功上传: $relative_path/$filename" >> ./upload_status.log
                rm "$file"
                echo "已成功上传并删除本地文件: $filename"
                
                # 如果目录为空则删除
                dirpath=$(dirname "$file")
                if [ -z "$(ls -A "$dirpath")" ]; then
                  rmdir "$dirpath"
                  echo "已删除空目录: $dirpath"
                fi
              else
                echo "$(date): 上传失败: $relative_path/$filename" >> ./upload_status.log
                mkdir -p "./pending_uploads/$relative_path"
                mv "$file" "./pending_uploads/$relative_path/"
                echo "上传失败，已移至待上传目录: $filename"
              fi
            done
          else
            echo "没有找到Releases目录"
          fi
      - name: 保存缓存（包含未成功上传的文件）
        uses: actions/cache/save@v3
        with:
          path: |
            ./downloads
            ./pending_uploads
            ./upload_status.log
          key: ${{ runner.os }}-scp-cache-${{ github.run_id }}

      - name: 输出上传状态报告
        run: |
          echo "=== 本次上传状态报告 ==="
          cat ./upload_status.log
