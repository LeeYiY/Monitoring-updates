name: 下载并通过Rsync单向同步文件

on:
  schedule:
    - cron: '0 2 * * *'  # 每天凌晨2点运行
  workflow_dispatch:  # 允许手动触发

jobs:
  file-transfer:
    runs-on: ubuntu-latest
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 准备工作目录
        run: |
          mkdir -p ./Releases
          # 创建状态文件记录上传情况
          touch ./upload_status.log
          tree

      - name: 恢复缓存（包括未上传成功的文件）
        uses: actions/cache@v3
        with:
          path: |
          key: ${{ runner.os }}-scp-cache-${{ github.run_id }}
          restore-keys: |
            ${{ runner.os }}-scp-cache-

      - name: 安装Python依赖
        run: |
          python -m pip install --upgrade pip
          pip install requests pyyaml

      - name: 执行github.py脚本
        run: |
          echo "开始执行github.py脚本..."
          python model/github.py
          echo "脚本执行完成，检查Releases目录内容:"
          ls -l ./Releases
      - name: 配置SSH客户端
        run: |
          mkdir -p ~/.ssh
            # 将私钥写入文件
            echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
            # 设置正确权限（必须为600，否则SSH会拒绝）
            chmod 600 ~/.ssh/id_rsa
            # 配置SSH以自动接受未知主机
            ssh-keyscan -p 10022 ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts
            cat ~/.ssh/id_rsa          

      - name: 上传文件到远程服务器
        env:
          REMOTE_HOST: ${{ secrets.SSH_HOST }}
          REMOTE_USER: root
          REMOTE_PORT: 10022
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          REMOTE_PATH: /root/zfile/data/000-自动更新
        run: |
          cat ~/.ssh/id_rsa 
          if [ -d "./Releases" ]; then
            echo "=== 开始同步Releases目录 ==="
            
            # 使用rsync同步整个目录结构
            echo "正在同步Releases目录到远程服务器..."
            rsync -avz -e "ssh -p $REMOTE_PORT" \
              --remove-source-files \
              --progress \
              --exclude='.gitkeep' \
              ./Releases/ "$REMOTE_USER@$REMOTE_HOST:$REMOTE_PATH/"
            
            # 检查同步结果
            if [ $? -eq 0 ]; then
              echo "$(date): 成功同步Releases目录" >> ./upload_status.log
              # 删除空目录
              find ./Releases -type d -empty -delete
            else
              echo "$(date): 同步Releases目录失败" >> ./upload_status.log
            fi
          else
            echo "没有找到Releases目录"
          fi
      - name: 保存缓存（包含未成功上传的文件）
        uses: actions/cache/save@v3
        with:
          path: |
            ./Releases
          key: ${{ runner.os }}-scp-cache-${{ github.run_id }}

      - name: 输出上传状态报告
        run: |
          echo "=== 本次上传状态报告 ==="
          cat ./upload_status.log

      - name: Commit and Push Changes
        env:
          TZ: Asia/Shanghai
        run: |
          git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add .
          git commit -m ":pencil: Auto update Releases.Json at  $(date +"%Y-%m-%d %H:%M")" -a || echo "No changes to commit"
          git push origin main
